generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                        @id @unique @default(autoincrement())
  username                 String                     @unique
  nickname                 String
  password                 String
  avatar                   String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  sendFriendRequests       FriendRequest[]            @relation("SendFriendRequests")
  receiveFriendRequests    FriendRequest[]            @relation("ReceiveFriendRequests")
  friendshipInitiated      Friendship[]               @relation("FriendshipInitiated")
  friendshipAccepted       Friendship[]               @relation("FriendshipAccepted")
  groupChatCreator         Conversation[]             @relation("GroupChatCreator")
  conversationParticipants ConversationParticipants[] @relation("ConversationParticipantsUser")
  messageSender            Message[]                  @relation("MessageSender")
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SendFriendRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiveFriendRequests", fields: [receiverId], references: [id])
  status     String   @default("pending")
  isRead     Boolean  @default(false)
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user1     User     @relation("FriendshipInitiated", fields: [user1Id], references: [id])
  user2     User     @relation("FriendshipAccepted", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}

model Conversation {
  id           Int                        @id @default(autoincrement())
  name         String? //群名称（私聊为null）
  isGroup      Boolean                    @default(false) //是否为群聊
  creatorId    Int? //群创建者（私聊为null）
  creator      User?                      @relation("GroupChatCreator", fields: [creatorId], references: [id])
  avatar       String? //群头像
  messages     Message[]                  @relation("MessageConversation")
  participants ConversationParticipants[] @relation("ConversationParticipants")
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
}

model ConversationParticipants {
  id             Int          @id @default(autoincrement())
  userId         Int
  conversationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastReadAt     DateTime     @default(now())
  user           User         @relation("ConversationParticipantsUser", fields: [userId], references: [id])
  conversation   Conversation @relation("ConversationParticipants", fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model Message {
  id             Int          @id @default(autoincrement())
  senderId       Int
  conversationId Int
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isRead         Boolean      @default(false)
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  conversation   Conversation @relation("MessageConversation", fields: [conversationId], references: [id])
}
